// Todo: Review the transaction modeling 

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EnumTransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

enum EnumTransactionType {
  P2P
  PIX
}

enum EnumUserStatus {
  PENDING
  ACTIVE
}

enum EnumSettingsType {
  GLOBAL
  USER
  SYSTEM
}

enum EnumPaymentDirection {
  IN
  OUT
}

model Settings {
  id             Int              @id @default(autoincrement())
  externalId     String           @default(uuid())
  key            String
  value          String           @db.LongText
  idAccountOwner Int?
  enviroment     EnumSettingsType @default(GLOBAL)
  createAt       DateTime         @default(now())
  updateAt       DateTime         @updatedAt
  account        AccountOwner?    @relation(fields: [idAccountOwner], references: [id])

  @@unique([idAccountOwner, key], name: "account_owner_id_key")
}

model AccountOwner {
  id         Int        @id @default(autoincrement())
  externalId String     @unique @default(uuid())
  name       String
  email      String
  password   String
  settings   Settings[]
  apikeys    ApiKey[]
  clients    Client[]
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt
  lastUseAt  DateTime
}

model ApiKey {
  id             Int           @id @default(autoincrement())
  identifier     String
  idAccountOwner Int?
  key            String
  description    String
  expireAt       DateTime
  lastUseAt      DateTime
  createAt       DateTime      @default(now())
  updateAt       DateTime      @updatedAt
  accountOwner   AccountOwner? @relation(fields: [idAccountOwner], references: [id])

  @@unique([idAccountOwner, key], name: "account_owner_id_key")
}

model Client {
  id             Int              @id @default(autoincrement())
  externalId     String           @default(uuid())
  idAccountOwner Int?
  name           String
  document       String           @unique
  status         EnumUserStatus   @default(PENDING)
  createAt       DateTime         @default(now())
  updateAt       DateTime         @updatedAt
  address        ClientAddress?
  wallet         ClientWallet?
  metadatas      ClientMetadata[]
  account        AccountOwner?    @relation(fields: [idAccountOwner], references: [id])
}

model ClientAddress {
  id         Int      @id @default(autoincrement())
  idClient   Int      @unique
  street     String
  city       String
  postalCode String
  country    String
  state      String
  stateCode  String   @db.VarChar(3)
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  client     Client   @relation(fields: [idClient], references: [id])
}

model ClientMetadata {
  id       Int      @id @default(autoincrement())
  idClient Int
  key      String
  value    String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  client   Client   @relation(fields: [idClient], references: [id])

  @@unique([idClient, key], name: "client_id_key")
}

model ClientWallet {
  id                   Int                   @id @default(autoincrement())
  idClient             Int                   @unique
  externalId           String                @unique @default(uuid())
  balance              Decimal               @default(0)
  createAt             DateTime              @default(now())
  updateAt             DateTime              @updatedAt
  client               Client                @relation(fields: [idClient], references: [id])
  clientWalletHistory  ClientWalletHistory[]
  sentTransactions     Transactions[]        @relation("SentTransactions")
  receivedTransactions Transactions[]        @relation("ReceivedTransactions")
}

model ClientWalletHistory {
  id             Int                  @id @default(autoincrement())
  idClientWallet Int
  direction      EnumPaymentDirection
  balanceBefore  Decimal
  balanceAfter   Decimal
  value          Decimal
  createAt       DateTime             @default(now())
  updateAt       DateTime             @updatedAt
  clientWallet   ClientWallet         @relation(fields: [idClientWallet], references: [id])
}

model Transactions {
  id               Int                   @id @default(autoincrement())
  externalId       String                @unique @default(uuid())
  status           EnumTransactionStatus @default(PENDING)
  transactionType  EnumTransactionType
  value            Decimal
  description      String                @default("")
  senderWallet     ClientWallet          @relation("SentTransactions", fields: [senderWalletId], references: [id])
  senderWalletId   Int
  receiverWallet   ClientWallet          @relation("ReceivedTransactions", fields: [receiverWalletId], references: [id])
  receiverWalletId Int
  expireAt         DateTime
  createAt         DateTime              @default(now())
  updateAt         DateTime              @updatedAt
}
